// src/SendPage.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';
import { useForm } from 'react-hook-form';
import toast from 'react-hot-toast';
import { QRCodeSVG } from 'qrcode.react';

const API_BASE = '';  // Relative pathâ€”proxied to https://sendmoon.xyz/api

function SendPage() {
  const [memecoins, setMemecoins] = useState([]);
  const [balance, setBalance] = useState(0);
  const [feeData, setFeeData] = useState({ feeDoge: 0, feeUsd: 0 });
  const [status, setStatus] = useState(null);
  const [claimCodeAfterPay, setClaimCodeAfterPay] = useState(null);
  const [processingGiftId, setProcessingGiftId] = useState(null);
  const { register, handleSubmit, formState: { errors }, reset, watch } = useForm();

  const deliveryMethod = watch('delivery_method');
  const amount = watch('amount');

  const dogePrice = memecoins[0]?.price_usd || 0;
  const totalUsd = (parseFloat(amount || 0) * dogePrice) + 1 + feeData.feeUsd;

  useEffect(() => {
    fetchMemecoins();
    fetchFee();
  }, []);

  const fetchMemecoins = async () => {
    try {
      const res = await axios.get(`${API_BASE}/api/memecoins`);
      setMemecoins(res.data.memecoins);
    } catch (err) {
      toast.error('Failed to load memecoins');
    }
  };

  const fetchFee = async () => {
    try {
      const res = await axios.get(`${API_BASE}/api/doge-fee-usd`);
      setFeeData(res.data);
    } catch (err) {
      toast.error('Failed to load fee estimate');
    }
  };

  useEffect(() => {
    if (memecoins[0]?.symbol === 'DOGE') {
      fetchBalance('DOGE');
    }
  }, [memecoins]);

  const fetchBalance = async (coin) => {
    try {
      const res = await axios.get(`${API_BASE}/api/pools/${coin}/balance`);
      setBalance(res.data.balance);
    } catch (err) {
      toast.error('Failed to load balance');
    }
  };

  const onSend = async (data) => {
    try {
      const res = await axios.post(`${API_BASE}/api/gifts`, {
        ...data,
        delivery_method: data.delivery_method.toUpperCase(),
      });
      if (res.data.success) {
        setProcessingGiftId(res.data.gift_id);
        setClaimCodeAfterPay(res.data.claim_code);  // Show code immediately, as it's generated upfront
        window.open(res.data.checkoutLink, '_blank');
        toast.success('Pay the invoice in the new tab. Recipient will be notified automatically once confirmed!');
        reset();
      }
    } catch (err) {
      toast.error(err.response?.data?.error || 'Send failed');
    }
  };

  // Optional: Add a status check button or auto-refresh for the gift
  const checkGiftStatus = async () => {
    if (!processingGiftId) return;
    try {
      // You'd need a new endpoint like GET /api/gift-status/:id returning status
      // For now, placeholderâ€”implement if desired
      toast.info('Gift processing... Check email for updates.');
    } catch (err) {
      toast.error('Status check failed');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-indigo-900 text-white flex flex-col items-center justify-center p-4">
      <header className="text-4xl font-bold mb-8">SendMoon ðŸš€</header>
      <div className="w-full max-w-md bg-white/10 backdrop-blur-md rounded-xl p-6 shadow-lg">
        <form onSubmit={handleSubmit(onSend)} className="space-y-4">
          <div>
            <label>Amount (DOGE)</label>
            <input type="number" step="any" {...register('amount', { required: true, min: 0.01, max: 10000 })} className="w-full p-2 bg-transparent border-b" />
            {errors.amount && <p className="text-red-400">Invalid amount (0.01-10,000)</p>}
            <p className="text-sm">Pool balance: {balance} DOGE</p>
          </div>
          {amount && (
            <div className="text-sm text-green-400">
              Total cost: ${totalUsd.toFixed(2)} USD 
              (DOGE: ${(parseFloat(amount) * dogePrice).toFixed(4)}, Platform: $1, Network: ${feeData.feeUsd.toFixed(4)})
            </div>
          )}
          <div>
            <label>Delivery Method</label>
            <select {...register('delivery_method', { required: true })} className="w-full p-2 bg-transparent border-b">
              <option value="email">Email</option>
              <option value="sms">SMS</option>
            </select>
          </div>
          {deliveryMethod === 'email' && (
            <div>
              <label>Recipient Email</label>
              <input type="email" {...register('recipient_email', { required: true })} placeholder="email@example.com" className="w-full p-2 bg-transparent border-b" />
              {errors.recipient_email && <p className="text-red-400">Invalid email</p>}
            </div>
          )}
          {deliveryMethod === 'sms' && (
            <div>
              <label>Recipient Phone</label>
              <input type="tel" {...register('recipient_phone', { required: true, pattern: /^\+[1-9]\d{1,14}$/ })} placeholder="+1234567890" className="w-full p-2 bg-transparent border-b" />
              {errors.recipient_phone && <p className="text-red-400">Invalid phone (e.g., +1234567890)</p>}
            </div>
          )}
          <div>
            <label>Sender Name (Optional)</label>
            <input {...register('sender_name')} className="w-full p-2 bg-transparent border-b" />
          </div>
          <div>
            <label>Message (Optional)</label>
            <textarea {...register('message')} className="w-full p-2 bg-transparent border-b" />
          </div>
          <div>
            <label>Return Address (Optional)</label>
            <input {...register('return_address')} placeholder="Your DOGE address for returns" className="w-full p-2 bg-transparent border-b" />
          </div>
          {processingGiftId && <p className="text-center text-yellow-400">Gift created! Payment processing via webhook. Recipient notified on confirmation.</p>}
          <button type="submit" disabled={processingGiftId} className="w-full bg-indigo-600 py-2 rounded disabled:opacity-50">Send ðŸš€</button>
          {claimCodeAfterPay && (
            <div className="mt-4 text-center">
              <p>Gift ready! Claim Code (share if needed):</p>
              <p className="font-mono">{claimCodeAfterPay}</p>
              <QRCodeSVG value={`https://sendmoon.xyz/claim?code=${claimCodeAfterPay}`} size={128} className="mx-auto" />
              <p className="text-sm text-gray-300 mt-2">Notification sends automatically after payment.</p>
            </div>
          )}
        </form>
      </div>
    </div>
  );
}

export default SendPage;
